# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import miscellaneous_pb2 as miscellaneous__pb2
from . import privacy_pb2 as privacy__pb2


class PrivacyStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BlockUser = channel.unary_unary(
                '/dialog.Privacy/BlockUser',
                request_serializer=privacy__pb2.RequestBlockUser.SerializeToString,
                response_deserializer=miscellaneous__pb2.ResponseSeq.FromString,
                )
        self.UnblockUser = channel.unary_unary(
                '/dialog.Privacy/UnblockUser',
                request_serializer=privacy__pb2.RequestUnblockUser.SerializeToString,
                response_deserializer=miscellaneous__pb2.ResponseSeq.FromString,
                )
        self.LoadBlockedUsers = channel.unary_unary(
                '/dialog.Privacy/LoadBlockedUsers',
                request_serializer=privacy__pb2.RequestLoadBlockedUsers.SerializeToString,
                response_deserializer=privacy__pb2.ResponseLoadBlockedUsers.FromString,
                )


class PrivacyServicer(object):
    """Missing associated documentation comment in .proto file."""

    def BlockUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnblockUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadBlockedUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PrivacyServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BlockUser': grpc.unary_unary_rpc_method_handler(
                    servicer.BlockUser,
                    request_deserializer=privacy__pb2.RequestBlockUser.FromString,
                    response_serializer=miscellaneous__pb2.ResponseSeq.SerializeToString,
            ),
            'UnblockUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UnblockUser,
                    request_deserializer=privacy__pb2.RequestUnblockUser.FromString,
                    response_serializer=miscellaneous__pb2.ResponseSeq.SerializeToString,
            ),
            'LoadBlockedUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadBlockedUsers,
                    request_deserializer=privacy__pb2.RequestLoadBlockedUsers.FromString,
                    response_serializer=privacy__pb2.ResponseLoadBlockedUsers.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dialog.Privacy', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Privacy(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def BlockUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dialog.Privacy/BlockUser',
            privacy__pb2.RequestBlockUser.SerializeToString,
            miscellaneous__pb2.ResponseSeq.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnblockUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dialog.Privacy/UnblockUser',
            privacy__pb2.RequestUnblockUser.SerializeToString,
            miscellaneous__pb2.ResponseSeq.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoadBlockedUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dialog.Privacy/LoadBlockedUsers',
            privacy__pb2.RequestLoadBlockedUsers.SerializeToString,
            privacy__pb2.ResponseLoadBlockedUsers.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
