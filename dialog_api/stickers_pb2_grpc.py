# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import miscellaneous_pb2 as miscellaneous__pb2
from . import stickers_pb2 as stickers__pb2


class StickersStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LoadOwnStickers = channel.unary_unary(
                '/dialog.Stickers/LoadOwnStickers',
                request_serializer=stickers__pb2.RequestLoadOwnStickers.SerializeToString,
                response_deserializer=stickers__pb2.ResponseLoadOwnStickers.FromString,
                )
        self.LoadUserStickersCollection = channel.unary_unary(
                '/dialog.Stickers/LoadUserStickersCollection',
                request_serializer=stickers__pb2.RequestLoadUserStickersCollection.SerializeToString,
                response_deserializer=stickers__pb2.ResponseLoadUserStickersCollection.FromString,
                )
        self.LoadAcesssibleStickers = channel.unary_unary(
                '/dialog.Stickers/LoadAcesssibleStickers',
                request_serializer=stickers__pb2.RequestLoadAccessibleStickers.SerializeToString,
                response_deserializer=stickers__pb2.ResponseLoadAccessibleStickers.FromString,
                )
        self.AddStickerPackToUserCollection = channel.unary_unary(
                '/dialog.Stickers/AddStickerPackToUserCollection',
                request_serializer=stickers__pb2.RequestAddStickerPackToUserCollection.SerializeToString,
                response_deserializer=miscellaneous__pb2.ResponseSeq.FromString,
                )
        self.UpdateUserStickersCollection = channel.unary_unary(
                '/dialog.Stickers/UpdateUserStickersCollection',
                request_serializer=stickers__pb2.RequestUpdateUserStickersCollection.SerializeToString,
                response_deserializer=miscellaneous__pb2.ResponseSeq.FromString,
                )
        self.LoadStickersShowcase = channel.unary_unary(
                '/dialog.Stickers/LoadStickersShowcase',
                request_serializer=stickers__pb2.RequestLoadStickersShowcase.SerializeToString,
                response_deserializer=stickers__pb2.ResponseLoadStickersShowcase.FromString,
                )
        self.LoadStickersShowcaseMore = channel.unary_unary(
                '/dialog.Stickers/LoadStickersShowcaseMore',
                request_serializer=stickers__pb2.RequestLoadStickersShowcaseMore.SerializeToString,
                response_deserializer=stickers__pb2.ResponseLoadStickersShowcase.FromString,
                )
        self.LoadStickerCollection = channel.unary_unary(
                '/dialog.Stickers/LoadStickerCollection',
                request_serializer=stickers__pb2.RequestLoadStickerCollection.SerializeToString,
                response_deserializer=stickers__pb2.ResponseLoadStickerCollection.FromString,
                )


class StickersServicer(object):
    """Missing associated documentation comment in .proto file."""

    def LoadOwnStickers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadUserStickersCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadAcesssibleStickers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddStickerPackToUserCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUserStickersCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadStickersShowcase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadStickersShowcaseMore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadStickerCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StickersServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LoadOwnStickers': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadOwnStickers,
                    request_deserializer=stickers__pb2.RequestLoadOwnStickers.FromString,
                    response_serializer=stickers__pb2.ResponseLoadOwnStickers.SerializeToString,
            ),
            'LoadUserStickersCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadUserStickersCollection,
                    request_deserializer=stickers__pb2.RequestLoadUserStickersCollection.FromString,
                    response_serializer=stickers__pb2.ResponseLoadUserStickersCollection.SerializeToString,
            ),
            'LoadAcesssibleStickers': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadAcesssibleStickers,
                    request_deserializer=stickers__pb2.RequestLoadAccessibleStickers.FromString,
                    response_serializer=stickers__pb2.ResponseLoadAccessibleStickers.SerializeToString,
            ),
            'AddStickerPackToUserCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.AddStickerPackToUserCollection,
                    request_deserializer=stickers__pb2.RequestAddStickerPackToUserCollection.FromString,
                    response_serializer=miscellaneous__pb2.ResponseSeq.SerializeToString,
            ),
            'UpdateUserStickersCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUserStickersCollection,
                    request_deserializer=stickers__pb2.RequestUpdateUserStickersCollection.FromString,
                    response_serializer=miscellaneous__pb2.ResponseSeq.SerializeToString,
            ),
            'LoadStickersShowcase': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadStickersShowcase,
                    request_deserializer=stickers__pb2.RequestLoadStickersShowcase.FromString,
                    response_serializer=stickers__pb2.ResponseLoadStickersShowcase.SerializeToString,
            ),
            'LoadStickersShowcaseMore': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadStickersShowcaseMore,
                    request_deserializer=stickers__pb2.RequestLoadStickersShowcaseMore.FromString,
                    response_serializer=stickers__pb2.ResponseLoadStickersShowcase.SerializeToString,
            ),
            'LoadStickerCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadStickerCollection,
                    request_deserializer=stickers__pb2.RequestLoadStickerCollection.FromString,
                    response_serializer=stickers__pb2.ResponseLoadStickerCollection.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dialog.Stickers', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Stickers(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def LoadOwnStickers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dialog.Stickers/LoadOwnStickers',
            stickers__pb2.RequestLoadOwnStickers.SerializeToString,
            stickers__pb2.ResponseLoadOwnStickers.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoadUserStickersCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dialog.Stickers/LoadUserStickersCollection',
            stickers__pb2.RequestLoadUserStickersCollection.SerializeToString,
            stickers__pb2.ResponseLoadUserStickersCollection.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoadAcesssibleStickers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dialog.Stickers/LoadAcesssibleStickers',
            stickers__pb2.RequestLoadAccessibleStickers.SerializeToString,
            stickers__pb2.ResponseLoadAccessibleStickers.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddStickerPackToUserCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dialog.Stickers/AddStickerPackToUserCollection',
            stickers__pb2.RequestAddStickerPackToUserCollection.SerializeToString,
            miscellaneous__pb2.ResponseSeq.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUserStickersCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dialog.Stickers/UpdateUserStickersCollection',
            stickers__pb2.RequestUpdateUserStickersCollection.SerializeToString,
            miscellaneous__pb2.ResponseSeq.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoadStickersShowcase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dialog.Stickers/LoadStickersShowcase',
            stickers__pb2.RequestLoadStickersShowcase.SerializeToString,
            stickers__pb2.ResponseLoadStickersShowcase.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoadStickersShowcaseMore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dialog.Stickers/LoadStickersShowcaseMore',
            stickers__pb2.RequestLoadStickersShowcaseMore.SerializeToString,
            stickers__pb2.ResponseLoadStickersShowcase.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoadStickerCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dialog.Stickers/LoadStickerCollection',
            stickers__pb2.RequestLoadStickerCollection.SerializeToString,
            stickers__pb2.ResponseLoadStickerCollection.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
